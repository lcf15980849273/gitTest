// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Action.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Action.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ActionReqPraise);
GPBObjCClassDeclaration(ActionReqSwitchRoom);
GPBObjCClassDeclaration(ActionReqTest);

#pragma mark - ActionRoot

@implementation ActionRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ActionRoot_FileDescriptor

static GPBFileDescriptor *ActionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"action"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum ActionType

GPBEnumDescriptor *ActionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ActionTypeNone\000ActionTypePraise\000ActionTy"
        "peSwitchRoom\000ActionTypeTest\000";
    static const int32_t values[] = {
        ActionType_ActionTypeNone,
        ActionType_ActionTypePraise,
        ActionType_ActionTypeSwitchRoom,
        ActionType_ActionTypeTest,
    };
    static const char *extraTextFormatInfo = "\004\000\016\000\001\020\000\002\024\000\003\016\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ActionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ActionType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ActionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ActionType_ActionTypeNone:
    case ActionType_ActionTypePraise:
    case ActionType_ActionTypeSwitchRoom:
    case ActionType_ActionTypeTest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ActionReq

@implementation ActionReq

@dynamic actionBodyOneOfCase;
@dynamic type;
@dynamic reqId;
@dynamic channelId;
@dynamic praise;
@dynamic switch_p;
@dynamic test;

typedef struct ActionReq__storage_ {
  uint32_t _has_storage_[2];
  ActionType type;
  uint32_t reqId;
  NSString *channelId;
  ActionReqPraise *praise;
  ActionReqSwitchRoom *switch_p;
  ActionReqTest *test;
} ActionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ActionType_EnumDescriptor,
        .number = ActionReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ActionReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "reqId",
        .dataTypeSpecific.clazz = Nil,
        .number = ActionReq_FieldNumber_ReqId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ActionReq__storage_, reqId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = ActionReq_FieldNumber_ChannelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ActionReq__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "praise",
        .dataTypeSpecific.clazz = GPBObjCClass(ActionReqPraise),
        .number = ActionReq_FieldNumber_Praise,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ActionReq__storage_, praise),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "switch_p",
        .dataTypeSpecific.clazz = GPBObjCClass(ActionReqSwitchRoom),
        .number = ActionReq_FieldNumber_Switch_p,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ActionReq__storage_, switch_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "test",
        .dataTypeSpecific.clazz = GPBObjCClass(ActionReqTest),
        .number = ActionReq_FieldNumber_Test,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ActionReq__storage_, test),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ActionReq class]
                                     rootClass:[ActionRoot class]
                                          file:ActionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ActionReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "actionBody",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\005\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ActionReq_Type_RawValue(ActionReq *message) {
  GPBDescriptor *descriptor = [ActionReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ActionReq_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetActionReq_Type_RawValue(ActionReq *message, int32_t value) {
  GPBDescriptor *descriptor = [ActionReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ActionReq_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

void ActionReq_ClearActionBodyOneOfCase(ActionReq *message) {
  GPBDescriptor *descriptor = [ActionReq descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - ActionReqPraise

@implementation ActionReqPraise

@dynamic uuid;
@dynamic roomId;
@dynamic times;
@dynamic anonymous;
@dynamic nickname;

typedef struct ActionReqPraise__storage_ {
  uint32_t _has_storage_[1];
  uint32_t times;
  NSString *uuid;
  NSString *roomId;
  NSString *nickname;
} ActionReqPraise__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = ActionReqPraise_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ActionReqPraise__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "roomId",
        .dataTypeSpecific.clazz = Nil,
        .number = ActionReqPraise_FieldNumber_RoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ActionReqPraise__storage_, roomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "times",
        .dataTypeSpecific.clazz = Nil,
        .number = ActionReqPraise_FieldNumber_Times,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ActionReqPraise__storage_, times),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "anonymous",
        .dataTypeSpecific.clazz = Nil,
        .number = ActionReqPraise_FieldNumber_Anonymous,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.clazz = Nil,
        .number = ActionReqPraise_FieldNumber_Nickname,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ActionReqPraise__storage_, nickname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ActionReqPraise class]
                                     rootClass:[ActionRoot class]
                                          file:ActionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ActionReqPraise__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ActionReqSwitchRoom

@implementation ActionReqSwitchRoom

@dynamic uuid;
@dynamic nickname;
@dynamic fromRoomId;
@dynamic toRoomId;
@dynamic announced;
@dynamic anonymous;

typedef struct ActionReqSwitchRoom__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  NSString *nickname;
  NSString *fromRoomId;
  NSString *toRoomId;
} ActionReqSwitchRoom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = ActionReqSwitchRoom_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ActionReqSwitchRoom__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.clazz = Nil,
        .number = ActionReqSwitchRoom_FieldNumber_Nickname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ActionReqSwitchRoom__storage_, nickname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromRoomId",
        .dataTypeSpecific.clazz = Nil,
        .number = ActionReqSwitchRoom_FieldNumber_FromRoomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ActionReqSwitchRoom__storage_, fromRoomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toRoomId",
        .dataTypeSpecific.clazz = Nil,
        .number = ActionReqSwitchRoom_FieldNumber_ToRoomId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ActionReqSwitchRoom__storage_, toRoomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "announced",
        .dataTypeSpecific.clazz = Nil,
        .number = ActionReqSwitchRoom_FieldNumber_Announced,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "anonymous",
        .dataTypeSpecific.clazz = Nil,
        .number = ActionReqSwitchRoom_FieldNumber_Anonymous,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ActionReqSwitchRoom class]
                                     rootClass:[ActionRoot class]
                                          file:ActionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ActionReqSwitchRoom__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\n\000\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ActionReqTest

@implementation ActionReqTest

@dynamic uuid;

typedef struct ActionReqTest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} ActionReqTest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = ActionReqTest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ActionReqTest__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ActionReqTest class]
                                     rootClass:[ActionRoot class]
                                          file:ActionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ActionReqTest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
